{"version":3,"file":"hello_near.js","sources":["../node_modules/near-sdk-js/lib/utils.js","../node_modules/near-sdk-js/lib/types/public_key.js","../node_modules/near-sdk-js/lib/types/vm_types.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/collections/vector.js","../node_modules/near-sdk-js/lib/collections/unordered-map.js","../node_modules/near-sdk-js/lib/collections/unordered-set.js","../node_modules/near-sdk-js/lib/near-bindgen.js","../src/contract.ts"],"sourcesContent":["// make PromiseIndex a nominal typing\nvar PromiseIndexBrand;\n(function (PromiseIndexBrand) {\n    PromiseIndexBrand[PromiseIndexBrand[\"_\"] = -1] = \"_\";\n})(PromiseIndexBrand || (PromiseIndexBrand = {}));\nconst TYPE_KEY = \"typeInfo\";\nvar TypeBrand;\n(function (TypeBrand) {\n    TypeBrand[\"BIGINT\"] = \"bigint\";\n    TypeBrand[\"DATE\"] = \"date\";\n})(TypeBrand || (TypeBrand = {}));\nexport const ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport const ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ACCOUNT_ID_REGEX = /^(([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+$/;\n/**\n * Concat two Uint8Array\n * @param array1\n * @param array2\n * @returns the concatenation of two array\n */\nexport function concat(array1, array2) {\n    const mergedArray = new Uint8Array(array1.length + array2.length);\n    mergedArray.set(array1);\n    mergedArray.set(array2, array1.length);\n    return mergedArray;\n}\n/**\n * Asserts that the expression passed to the function is truthy, otherwise throws a new Error with the provided message.\n *\n * @param expression - The expression to be asserted.\n * @param message - The error message to be printed.\n */\nexport function assert(expression, message) {\n    if (!expression) {\n        throw new Error(\"assertion failed: \" + message);\n    }\n}\nexport function getValueWithOptions(value, options = {\n    deserializer: deserialize,\n}) {\n    if (value === null) {\n        return options?.defaultValue ?? null;\n    }\n    const deserialized = deserialize(value);\n    if (deserialized === undefined || deserialized === null) {\n        return options?.defaultValue ?? null;\n    }\n    if (options?.reconstructor) {\n        return options.reconstructor(deserialized);\n    }\n    return deserialized;\n}\nexport function serializeValueWithOptions(value, { serializer } = {\n    serializer: serialize,\n}) {\n    return serializer(value);\n}\nexport function serialize(valueToSerialize) {\n    return encode(JSON.stringify(valueToSerialize, function (key, value) {\n        if (typeof value === \"bigint\") {\n            return {\n                value: value.toString(),\n                [TYPE_KEY]: TypeBrand.BIGINT,\n            };\n        }\n        if (typeof this[key] === \"object\" &&\n            this[key] !== null &&\n            this[key] instanceof Date) {\n            return {\n                value: this[key].toISOString(),\n                [TYPE_KEY]: TypeBrand.DATE,\n            };\n        }\n        return value;\n    }));\n}\nexport function deserialize(valueToDeserialize) {\n    return JSON.parse(decode(valueToDeserialize), (_, value) => {\n        if (value !== null &&\n            typeof value === \"object\" &&\n            Object.keys(value).length === 2 &&\n            Object.keys(value).every((key) => [\"value\", TYPE_KEY].includes(key))) {\n            switch (value[TYPE_KEY]) {\n                case TypeBrand.BIGINT:\n                    return BigInt(value[\"value\"]);\n                case TypeBrand.DATE:\n                    return new Date(value[\"value\"]);\n            }\n        }\n        return value;\n    });\n}\n/**\n * Validates the Account ID according to the NEAR protocol\n * [Account ID rules](https://nomicon.io/DataStructures/Account#account-id-rules).\n *\n * @param accountId - The Account ID string you want to validate.\n */\nexport function validateAccountId(accountId) {\n    return (accountId.length >= 2 &&\n        accountId.length <= 64 &&\n        ACCOUNT_ID_REGEX.test(accountId));\n}\n/**\n * A subset of NodeJS TextEncoder API\n */\nexport class TextEncoder {\n    encode(s) {\n        return env.utf8_string_to_uint8array(s);\n    }\n}\n/**\n * A subset of NodeJS TextDecoder API. Only support utf-8 and latin1 encoding.\n */\nexport class TextDecoder {\n    constructor(encoding = \"utf-8\") {\n        this.encoding = encoding;\n    }\n    decode(a) {\n        if (this.encoding == \"utf-8\") {\n            return env.uint8array_to_utf8_string(a);\n        }\n        else if (this.encoding == \"latin1\") {\n            return env.uint8array_to_latin1_string(a);\n        }\n        else {\n            throw new Error(\"unsupported encoding: \" + this.encoding);\n        }\n    }\n}\n/**\n * Convert a string to Uint8Array, each character must have a char code between 0-255.\n * @param s - string that with only Latin1 character to convert\n * @returns result Uint8Array\n */\nexport function bytes(s) {\n    return env.latin1_string_to_uint8array(s);\n}\n/**\n * Convert a Uint8Array to string, each uint8 to the single character of that char code\n * @param a - Uint8Array to convert\n * @returns result string\n */\nexport function str(a) {\n    return env.uint8array_to_latin1_string(a);\n}\n/**\n * Encode the string to Uint8Array with UTF-8 encoding\n * @param s - String to encode\n * @returns result Uint8Array\n */\nexport function encode(s) {\n    return env.utf8_string_to_uint8array(s);\n}\n/**\n * Decode the Uint8Array to string in UTF-8 encoding\n * @param a - array to decode\n * @returns result string\n */\nexport function decode(a) {\n    return env.uint8array_to_utf8_string(a);\n}\n","import { base58 } from \"@scure/base\";\nimport { concat } from \"../utils\";\nexport var CurveType;\n(function (CurveType) {\n    CurveType[CurveType[\"ED25519\"] = 0] = \"ED25519\";\n    CurveType[CurveType[\"SECP256K1\"] = 1] = \"SECP256K1\";\n})(CurveType || (CurveType = {}));\nvar DataLength;\n(function (DataLength) {\n    DataLength[DataLength[\"ED25519\"] = 32] = \"ED25519\";\n    DataLength[DataLength[\"SECP256K1\"] = 64] = \"SECP256K1\";\n})(DataLength || (DataLength = {}));\nfunction getCurveType(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return curveType;\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction dataLength(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return {\n                [CurveType.ED25519]: DataLength.ED25519,\n                [CurveType.SECP256K1]: DataLength.SECP256K1,\n            }[curveType];\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction splitKeyTypeData(value) {\n    const idx = value.indexOf(\":\");\n    if (idx >= 0) {\n        return [\n            curveTypeFromStr(value.substring(0, idx)),\n            value.substring(idx + 1),\n        ];\n    }\n    else {\n        return [CurveType.ED25519, value];\n    }\n}\nexport function curveTypeFromStr(value) {\n    switch (value) {\n        case \"ed25519\":\n            return CurveType.ED25519;\n        case \"secp256k1\":\n            return CurveType.SECP256K1;\n        default:\n            throw new UnknownCurve();\n    }\n}\nexport class ParsePublicKeyError extends Error {\n}\nexport class InvalidLengthError extends ParsePublicKeyError {\n    constructor(length, expectedLength) {\n        super(`Invalid length: ${length}. Expected: ${expectedLength}`);\n        this.length = length;\n        this.expectedLength = expectedLength;\n    }\n}\nexport class Base58Error extends ParsePublicKeyError {\n    constructor(error) {\n        super(`Base58 error: ${error}`);\n        this.error = error;\n    }\n}\nexport class UnknownCurve extends ParsePublicKeyError {\n    constructor() {\n        super(\"Unknown curve\");\n    }\n}\n/**\n * A abstraction on top of the NEAR public key string.\n */\nexport class PublicKey {\n    /**\n     * @param data - The string you want to create a PublicKey from.\n     */\n    constructor(data) {\n        const curveLenght = dataLength(data[0]);\n        if (data.length !== curveLenght + 1) {\n            throw new InvalidLengthError(data.length, curveLenght + 1);\n        }\n        this.type = getCurveType(data[0]);\n        this.data = data;\n    }\n    /**\n     * The curve type of the public key.\n     */\n    curveType() {\n        return this.type;\n    }\n    /**\n     * Create a public key from a public key string.\n     *\n     * @param publicKeyString - The public key string you want to create a PublicKey from.\n     */\n    static fromString(publicKeyString) {\n        const [curve, keyData] = splitKeyTypeData(publicKeyString);\n        let data;\n        try {\n            data = base58.decode(keyData);\n        }\n        catch (error) {\n            throw new Base58Error(error.message);\n        }\n        return new PublicKey(concat(new Uint8Array([curve]), data));\n    }\n}\n","/**\n * A Promise result in near can be one of:\n * - NotReady = 0 - the promise you are specifying is still not ready, not yet failed nor successful.\n * - Successful = 1 - the promise has been successfully executed and you can retrieve the resulting value.\n * - Failed = 2 - the promise execution has failed.\n */\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\n/**\n * A promise error can either be due to the promise failing or not yet being ready.\n */\nexport var PromiseError;\n(function (PromiseError) {\n    PromiseError[PromiseError[\"Failed\"] = 0] = \"Failed\";\n    PromiseError[PromiseError[\"NotReady\"] = 1] = \"NotReady\";\n})(PromiseError || (PromiseError = {}));\n","import { assert, str, encode, decode, } from \"./utils\";\nimport { PromiseResult } from \"./types\";\nconst U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\n/**\n * Logs parameters in the NEAR WASM virtual machine.\n *\n * @param params - Parameters to log.\n */\nexport function log(...params) {\n    env.log(params.reduce((accumulated, parameter, index) => {\n        // Stringify undefined\n        const param = parameter === undefined ? \"undefined\" : parameter;\n        // Convert Objects to strings and convert to string\n        const stringified = typeof param === \"object\" ? JSON.stringify(param) : `${param}`;\n        if (index === 0) {\n            return stringified;\n        }\n        return `${accumulated} ${stringified}`;\n    }, \"\"));\n}\n/**\n * Returns the account ID of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the public key of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\n/**\n * Returns the account ID of the account that called the function.\n * Can only be called in a call or initialize function.\n */\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the account ID of the current contract - the contract that is being executed.\n */\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the current block index.\n */\nexport function blockIndex() {\n    return env.block_index();\n}\n/**\n * Returns the current block height.\n */\nexport function blockHeight() {\n    return blockIndex();\n}\n/**\n * Returns the current block timestamp.\n */\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\n/**\n * Returns the current epoch height.\n */\nexport function epochHeight() {\n    return env.epoch_height();\n}\n/**\n * Returns the amount of NEAR attached to this function call.\n * Can only be called in payable functions.\n */\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\n/**\n * Returns the amount of Gas that was attached to this function call.\n */\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\n/**\n * Returns the amount of Gas that has been used by this function call until now.\n */\nexport function usedGas() {\n    return env.used_gas();\n}\n/**\n * Returns the current account's account balance.\n */\nexport function accountBalance() {\n    return env.account_balance();\n}\n/**\n * Returns the current account's locked balance.\n */\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\n/**\n * Reads the value from NEAR storage that is stored under the provided key.\n *\n * @param key - The key to read from storage.\n */\nexport function storageReadRaw(key) {\n    const returnValue = env.storage_read(key, 0);\n    if (returnValue !== 1n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n/**\n * Reads the utf-8 string value from NEAR storage that is stored under the provided key.\n *\n * @param key - The utf-8 string key to read from storage.\n */\nexport function storageRead(key) {\n    const ret = storageReadRaw(encode(key));\n    if (ret !== null) {\n        return decode(ret);\n    }\n    return null;\n}\n/**\n * Checks for the existance of a value under the provided key in NEAR storage.\n *\n * @param key - The key to check for in storage.\n */\nexport function storageHasKeyRaw(key) {\n    return env.storage_has_key(key) === 1n;\n}\n/**\n * Checks for the existance of a value under the provided utf-8 string key in NEAR storage.\n *\n * @param key - The utf-8 string key to check for in storage.\n */\nexport function storageHasKey(key) {\n    return storageHasKeyRaw(encode(key));\n}\n/**\n * Get the last written or removed value from NEAR storage.\n */\nexport function storageGetEvictedRaw() {\n    return env.read_register(EVICTED_REGISTER);\n}\n/**\n * Get the last written or removed value from NEAR storage as utf-8 string.\n */\nexport function storageGetEvicted() {\n    return decode(storageGetEvictedRaw());\n}\n/**\n * Returns the current accounts NEAR storage usage.\n */\nexport function storageUsage() {\n    return env.storage_usage();\n}\n/**\n * Writes the provided bytes to NEAR storage under the provided key.\n *\n * @param key - The key under which to store the value.\n * @param value - The value to store.\n */\nexport function storageWriteRaw(key, value) {\n    return env.storage_write(key, value, EVICTED_REGISTER) === 1n;\n}\n/**\n * Writes the provided utf-8 string to NEAR storage under the provided key.\n *\n * @param key - The utf-8 string key under which to store the value.\n * @param value - The utf-8 string value to store.\n */\nexport function storageWrite(key, value) {\n    return storageWriteRaw(encode(key), encode(value));\n}\n/**\n * Removes the value of the provided key from NEAR storage.\n *\n * @param key - The key to be removed.\n */\nexport function storageRemoveRaw(key) {\n    return env.storage_remove(key, EVICTED_REGISTER) === 1n;\n}\n/**\n * Removes the value of the provided utf-8 string key from NEAR storage.\n *\n * @param key - The utf-8 string key to be removed.\n */\nexport function storageRemove(key) {\n    return storageRemoveRaw(encode(key));\n}\n/**\n * Returns the cost of storing 0 Byte on NEAR storage.\n */\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n/**\n * Returns the arguments passed to the current smart contract call.\n */\nexport function inputRaw() {\n    env.input(0);\n    return env.read_register(0);\n}\n/**\n * Returns the arguments passed to the current smart contract call as utf-8 string.\n */\nexport function input() {\n    return decode(inputRaw());\n}\n/**\n * Returns the value from the NEAR WASM virtual machine.\n *\n * @param value - The value to return.\n */\nexport function valueReturnRaw(value) {\n    env.value_return(value);\n}\n/**\n * Returns the utf-8 string value from the NEAR WASM virtual machine.\n *\n * @param value - The utf-8 string value to return.\n */\nexport function valueReturn(value) {\n    valueReturnRaw(encode(value));\n}\n/**\n * Returns a random string of bytes.\n */\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreateRaw(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return promiseCreateRaw(accountId, methodName, encode(args), amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThenRaw(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return promiseThenRaw(promiseIndex, accountId, methodName, encode(args), amount, gas);\n}\n/**\n * Join an arbitrary array of NEAR promises.\n *\n * @param promiseIndexes - An arbitrary array of NEAR promise indexes to join.\n */\nexport function promiseAnd(...promiseIndexes) {\n    return env.promise_and(...promiseIndexes);\n}\n/**\n * Create a NEAR promise which will have multiple promise actions inside.\n *\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\n/**\n * Attach a callback NEAR promise to a batch of NEAR promise actions.\n *\n * @param promiseIndex - The NEAR promise index of the batch.\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\n/**\n * Attach a create account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a create account action to.\n */\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\n/**\n * Attach a deploy contract promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a deploy contract action to.\n * @param code - The WASM byte code of the contract to be deployed.\n */\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCallRaw(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    promiseBatchActionFunctionCallRaw(promiseIndex, methodName, encode(args), amount, gas);\n}\n/**\n * Attach a transfer promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a transfer action to.\n * @param amount - The amount of NEAR to transfer.\n */\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\n/**\n * Attach a stake promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a stake action to.\n * @param amount - The amount of NEAR to stake.\n * @param publicKey - The public key with which to stake.\n */\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\n/**\n * Attach a add full access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add full access key action to.\n * @param publicKey - The public key to add as a full access key.\n * @param nonce - The nonce to use.\n */\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\n/**\n * Attach a add access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add access key action to.\n * @param publicKey - The public key to add.\n * @param nonce - The nonce to use.\n * @param allowance - The allowance of the access key.\n * @param receiverId - The account ID of the receiver.\n * @param methodNames - The names of the method to allow the key for.\n */\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\n/**\n * Attach a delete key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete key action to.\n * @param publicKey - The public key to delete.\n */\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\n/**\n * Attach a delete account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete account action to.\n * @param beneficiaryId - The account ID of the beneficiary - the account that receives the remaining amount of NEAR.\n */\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeightRaw(promiseIndex, methodName, args, amount, gas, weight) {\n    env.promise_batch_action_function_call_weight(promiseIndex, methodName, args, amount, gas, weight);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeight(promiseIndex, methodName, args, amount, gas, weight) {\n    promiseBatchActionFunctionCallWeightRaw(promiseIndex, methodName, encode(args), amount, gas, weight);\n}\n/**\n * The number of promise results available.\n */\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index.\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResultRaw(promiseIndex) {\n    const status = env.promise_result(promiseIndex, 0);\n    assert(Number(status) === PromiseResult.Successful, `Promise result ${status == PromiseResult.Failed\n        ? \"Failed\"\n        : status == PromiseResult.NotReady\n            ? \"NotReady\"\n            : status}`);\n    return env.read_register(0);\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index as utf-8 string\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResult(promiseIndex) {\n    return decode(promiseResultRaw(promiseIndex));\n}\n/**\n * Executes the promise in the NEAR WASM virtual machine.\n *\n * @param promiseIndex - The index of the promise to execute.\n */\nexport function promiseReturn(promiseIndex) {\n    env.promise_return(promiseIndex);\n}\n/**\n * Returns sha256 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns keccak256 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns keccak512 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns ripemd160 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\n/**\n * Recovers an ECDSA signer address from a 32-byte message hash and a corresponding\n * signature along with v recovery byte. Takes in an additional flag to check for\n * malleability of the signature which is generally only ideal for transactions.\n *\n * @param hash - 32-byte message hash\n * @param sig - signature\n * @param v - number of recovery byte\n * @param malleabilityFlag - whether to check malleability\n * @returns 64 bytes representing the public key if the recovery was successful.\n */\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    const returnValue = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (returnValue === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n// NOTE: \"env.panic(msg)\" is not exported, use \"throw Error(msg)\" instead\n/**\n * Panic the transaction execution with given message\n * @param msg - panic message in raw bytes, which should be a valid UTF-8 sequence\n */\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\n/**\n * Log the message in transaction logs\n * @param msg - message in raw bytes, which should be a valid UTF-8 sequence\n */\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\n/**\n * Log the message in transaction logs\n * @param msg - message in raw bytes, which should be a valid UTF-16 sequence\n */\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\n/**\n * Returns the number of staked NEAR of given validator, in yoctoNEAR\n * @param accountId - validator's AccountID\n * @returns - staked amount\n */\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\n/**\n * Returns the number of staked NEAR of all validators, in yoctoNEAR\n * @returns total staked amount\n */\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\n/**\n * Computes multiexp on alt_bn128 curve using Pippenger's algorithm \\sum_i\n * mul_i g_{1 i} should be equal result.\n *\n * @param value - equence of (g1:G1, fr:Fr), where\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq.\n * `value` is encoded as packed, little-endian\n * `[((u256, u256), u256)]` slice.\n *\n * @returns multi exp sum\n */\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\n/**\n * Computes sum for signed g1 group elements on alt_bn128 curve \\sum_i\n * (-1)^{sign_i} g_{1 i} should be equal result.\n *\n * @param value - sequence of (sign:bool, g1:G1), where\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq.\n * value` is encoded a as packed, little-endian\n * `[((u256, u256), ((u256, u256), (u256, u256)))]` slice.\n *\n * @returns sum over Fq.\n */\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\n/**\n * Computes pairing check on alt_bn128 curve.\n * \\sum_i e(g_{1 i}, g_{2 i}) should be equal one (in additive notation), e(g1, g2) is Ate pairing\n *\n * @param value - sequence of (g1:G1, g2:G2), where\n * G2 is Fr-ordered subgroup point (x:Fq2, y:Fq2) on alt_bn128 twist,\n * alt_bn128 twist is Y^2 = X^3 + 3/(i+9) curve over Fq2\n * Fq2 is complex field element (re: Fq, im: Fq)\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq\n * `value` is encoded a as packed, little-endian\n * `[((u256, u256), ((u256, u256), (u256, u256)))]` slice.\n *\n * @returns whether pairing check pass\n */\nexport function altBn128PairingCheck(value) {\n    return env.alt_bn128_pairing_check(value) === 1n;\n}\n","import * as near from \"../api\";\nimport { getValueWithOptions, serializeValueWithOptions, encode, } from \"../utils\";\n/**\n * A lookup map that stores data in NEAR storage.\n */\nexport class LookupMap {\n    /**\n     * @param keyPrefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    /**\n     * Checks whether the collection contains the value.\n     *\n     * @param key - The value for which to check the presence.\n     */\n    containsKey(key) {\n        const storageKey = this.keyPrefix + key;\n        return near.storageHasKey(storageKey);\n    }\n    /**\n     * Get the data stored at the provided key.\n     *\n     * @param key - The key at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(key, options) {\n        const storageKey = this.keyPrefix + key;\n        const value = near.storageReadRaw(encode(storageKey));\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Removes and retrieves the element with the provided key.\n     *\n     * @param key - The key at which to remove data.\n     * @param options - Options for retrieving the data.\n     */\n    remove(key, options) {\n        const storageKey = this.keyPrefix + key;\n        if (!near.storageRemove(storageKey)) {\n            return options?.defaultValue ?? null;\n        }\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Store a new value at the provided key.\n     *\n     * @param key - The key at which to store in the collection.\n     * @param newValue - The value to store in the collection.\n     * @param options - Options for retrieving and storing the data.\n     */\n    set(key, newValue, options) {\n        const storageKey = this.keyPrefix + key;\n        const storageValue = serializeValueWithOptions(newValue, options);\n        if (!near.storageWriteRaw(encode(storageKey), storageValue)) {\n            return options?.defaultValue ?? null;\n        }\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Extends the current collection with the passed in array of key-value pairs.\n     *\n     * @param keyValuePairs - The key-value pairs to extend the collection with.\n     * @param options - Options for storing the data.\n     */\n    extend(keyValuePairs, options) {\n        for (const [key, value] of keyValuePairs) {\n            this.set(key, value, options);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","import * as near from \"../api\";\nimport { assert, getValueWithOptions, serializeValueWithOptions, ERR_INCONSISTENT_STATE, ERR_INDEX_OUT_OF_BOUNDS, str, bytes, } from \"../utils\";\nfunction indexToKey(prefix, index) {\n    const data = new Uint32Array([index]);\n    const array = new Uint8Array(data.buffer);\n    const key = str(array);\n    return prefix + key;\n}\n/**\n * An iterable implementation of vector that stores its content on the trie.\n * Uses the following map: index -> element\n */\nexport class Vector {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     * @param length - The initial length of the collection. By default 0.\n     */\n    constructor(prefix, length = 0) {\n        this.prefix = prefix;\n        this.length = length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this.length === 0;\n    }\n    /**\n     * Get the data stored at the provided index.\n     *\n     * @param index - The index at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(index, options) {\n        if (index >= this.length) {\n            return options?.defaultValue ?? null;\n        }\n        const storageKey = indexToKey(this.prefix, index);\n        const value = near.storageReadRaw(bytes(storageKey));\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Removes an element from the vector and returns it in serialized form.\n     * The removed element is replaced by the last element of the vector.\n     * Does not preserve ordering, but is `O(1)`.\n     *\n     * @param index - The index at which to remove the element.\n     * @param options - Options for retrieving and storing the data.\n     */\n    swapRemove(index, options) {\n        assert(index < this.length, ERR_INDEX_OUT_OF_BOUNDS);\n        if (index + 1 === this.length) {\n            return this.pop(options);\n        }\n        const key = indexToKey(this.prefix, index);\n        const last = this.pop(options);\n        assert(near.storageWriteRaw(bytes(key), serializeValueWithOptions(last, options)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Adds data to the collection.\n     *\n     * @param element - The data to store.\n     * @param options - Options for storing the data.\n     */\n    push(element, options) {\n        const key = indexToKey(this.prefix, this.length);\n        this.length += 1;\n        near.storageWriteRaw(bytes(key), serializeValueWithOptions(element, options));\n    }\n    /**\n     * Removes and retrieves the element with the highest index.\n     *\n     * @param options - Options for retrieving the data.\n     */\n    pop(options) {\n        if (this.isEmpty()) {\n            return options?.defaultValue ?? null;\n        }\n        const lastIndex = this.length - 1;\n        const lastKey = indexToKey(this.prefix, lastIndex);\n        this.length -= 1;\n        assert(near.storageRemoveRaw(bytes(lastKey)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Replaces the data stored at the provided index with the provided data and returns the previously stored data.\n     *\n     * @param index - The index at which to replace the data.\n     * @param element - The data to replace with.\n     * @param options - Options for retrieving and storing the data.\n     */\n    replace(index, element, options) {\n        assert(index < this.length, ERR_INDEX_OUT_OF_BOUNDS);\n        const key = indexToKey(this.prefix, index);\n        assert(near.storageWriteRaw(bytes(key), serializeValueWithOptions(element, options)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Extends the current collection with the passed in array of elements.\n     *\n     * @param elements - The elements to extend the collection with.\n     */\n    extend(elements) {\n        for (const element of elements) {\n            this.push(element);\n        }\n    }\n    [Symbol.iterator]() {\n        return new VectorIterator(this);\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new VectorIterator(this, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear() {\n        for (let index = 0; index < this.length; index++) {\n            const key = indexToKey(this.prefix, index);\n            near.storageRemoveRaw(bytes(key));\n        }\n        this.length = 0;\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const vector = new Vector(data.prefix, data.length);\n        return vector;\n    }\n}\n/**\n * An iterator for the Vector collection.\n */\nexport class VectorIterator {\n    /**\n     * @param vector - The vector collection to create an iterator for.\n     * @param options - Options for retrieving and storing data.\n     */\n    constructor(vector, options) {\n        this.vector = vector;\n        this.options = options;\n        this.current = 0;\n    }\n    next() {\n        if (this.current >= this.vector.length) {\n            return { value: null, done: true };\n        }\n        const value = this.vector.get(this.current, this.options);\n        this.current += 1;\n        return { value, done: false };\n    }\n}\n","import { assert, ERR_INCONSISTENT_STATE, getValueWithOptions, serializeValueWithOptions, encode, decode, } from \"../utils\";\nimport { Vector, VectorIterator } from \"./vector\";\nimport { LookupMap } from \"./lookup-map\";\n/**\n * An unordered map that stores data in NEAR storage.\n */\nexport class UnorderedMap {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(prefix) {\n        this.prefix = prefix;\n        this._keys = new Vector(`${prefix}u`); // intentional different prefix with old UnorderedMap\n        this.values = new LookupMap(`${prefix}m`);\n    }\n    /**\n     * The number of elements stored in the collection.\n     */\n    get length() {\n        return this._keys.length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this._keys.isEmpty();\n    }\n    /**\n     * Get the data stored at the provided key.\n     *\n     * @param key - The key at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(key, options) {\n        const valueAndIndex = this.values.get(key);\n        if (valueAndIndex === null) {\n            return options?.defaultValue ?? null;\n        }\n        const [value] = valueAndIndex;\n        return getValueWithOptions(encode(value), options);\n    }\n    /**\n     * Store a new value at the provided key.\n     *\n     * @param key - The key at which to store in the collection.\n     * @param value - The value to store in the collection.\n     * @param options - Options for retrieving and storing the data.\n     */\n    set(key, value, options) {\n        const valueAndIndex = this.values.get(key);\n        const serialized = serializeValueWithOptions(value, options);\n        if (valueAndIndex === null) {\n            const newElementIndex = this.length;\n            this._keys.push(key);\n            this.values.set(key, [decode(serialized), newElementIndex]);\n            return null;\n        }\n        const [oldValue, oldIndex] = valueAndIndex;\n        this.values.set(key, [decode(serialized), oldIndex]);\n        return getValueWithOptions(encode(oldValue), options);\n    }\n    /**\n     * Removes and retrieves the element with the provided key.\n     *\n     * @param key - The key at which to remove data.\n     * @param options - Options for retrieving the data.\n     */\n    remove(key, options) {\n        const oldValueAndIndex = this.values.remove(key);\n        if (oldValueAndIndex === null) {\n            return options?.defaultValue ?? null;\n        }\n        const [value, index] = oldValueAndIndex;\n        assert(this._keys.swapRemove(index) !== null, ERR_INCONSISTENT_STATE);\n        // the last key is swapped to key[index], the corresponding [value, index] need update\n        if (!this._keys.isEmpty() && index !== this._keys.length) {\n            // if there is still elements and it was not the last element\n            const swappedKey = this._keys.get(index);\n            const swappedValueAndIndex = this.values.get(swappedKey);\n            assert(swappedValueAndIndex !== null, ERR_INCONSISTENT_STATE);\n            this.values.set(swappedKey, [swappedValueAndIndex[0], index]);\n        }\n        return getValueWithOptions(encode(value), options);\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear() {\n        for (const key of this._keys) {\n            // Set instead of remove to avoid loading the value from storage.\n            this.values.set(key, null);\n        }\n        this._keys.clear();\n    }\n    [Symbol.iterator]() {\n        return new UnorderedMapIterator(this);\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new UnorderedMapIterator(this, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Extends the current collection with the passed in array of key-value pairs.\n     *\n     * @param keyValuePairs - The key-value pairs to extend the collection with.\n     */\n    extend(keyValuePairs) {\n        for (const [key, value] of keyValuePairs) {\n            this.set(key, value);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const map = new UnorderedMap(data.prefix);\n        // reconstruct keys Vector\n        map._keys = new Vector(`${data.prefix}u`);\n        map._keys.length = data._keys.length;\n        // reconstruct values LookupMap\n        map.values = new LookupMap(`${data.prefix}m`);\n        return map;\n    }\n    keys({ start, limit }) {\n        const ret = [];\n        if (start === undefined) {\n            start = 0;\n        }\n        if (limit == undefined) {\n            limit = this.length - start;\n        }\n        for (let i = start; i < start + limit; i++) {\n            ret.push(this._keys.get(i));\n        }\n        return ret;\n    }\n}\n/**\n * An iterator for the UnorderedMap collection.\n */\nclass UnorderedMapIterator {\n    /**\n     * @param unorderedMap - The unordered map collection to create an iterator for.\n     * @param options - Options for retrieving and storing data.\n     */\n    constructor(unorderedMap, options) {\n        this.options = options;\n        this.keys = new VectorIterator(unorderedMap._keys);\n        this.map = unorderedMap.values;\n    }\n    next() {\n        const key = this.keys.next();\n        if (key.done) {\n            return { value: [key.value, null], done: key.done };\n        }\n        const valueAndIndex = this.map.get(key.value);\n        assert(valueAndIndex !== null, ERR_INCONSISTENT_STATE);\n        return {\n            done: key.done,\n            value: [\n                key.value,\n                getValueWithOptions(encode(valueAndIndex[0]), this.options),\n            ],\n        };\n    }\n}\n","import * as near from \"../api\";\nimport { assert, serializeValueWithOptions, ERR_INCONSISTENT_STATE, encode, } from \"../utils\";\nimport { Vector, VectorIterator } from \"./vector\";\nfunction serializeIndex(index) {\n    const data = new Uint32Array([index]);\n    const array = new Uint8Array(data.buffer);\n    return array;\n}\nfunction deserializeIndex(rawIndex) {\n    const [data] = new Uint32Array(rawIndex.buffer);\n    return data;\n}\n/**\n * An unordered set that stores data in NEAR storage.\n */\nexport class UnorderedSet {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(prefix) {\n        this.prefix = prefix;\n        this.elementIndexPrefix = `${prefix}i`;\n        this._elements = new Vector(`${prefix}e`);\n    }\n    /**\n     * The number of elements stored in the collection.\n     */\n    get length() {\n        return this._elements.length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this._elements.isEmpty();\n    }\n    /**\n     * Checks whether the collection contains the value.\n     *\n     * @param element - The value for which to check the presence.\n     * @param options - Options for storing data.\n     */\n    contains(element, options) {\n        const indexLookup = this.elementIndexPrefix + serializeValueWithOptions(element, options);\n        return near.storageHasKey(indexLookup);\n    }\n    /**\n     * If the set did not have this value present, `true` is returned.\n     * If the set did have this value present, `false` is returned.\n     *\n     * @param element - The value to store in the collection.\n     * @param options - Options for storing the data.\n     */\n    set(element, options) {\n        const indexLookup = this.elementIndexPrefix + serializeValueWithOptions(element, options);\n        if (near.storageRead(indexLookup)) {\n            return false;\n        }\n        const nextIndex = this.length;\n        const nextIndexRaw = serializeIndex(nextIndex);\n        near.storageWriteRaw(encode(indexLookup), nextIndexRaw);\n        this._elements.push(element, options);\n        return true;\n    }\n    /**\n     * Returns true if the element was present in the set.\n     *\n     * @param element - The entry to remove.\n     * @param options - Options for retrieving and storing data.\n     */\n    remove(element, options) {\n        const indexLookup = this.elementIndexPrefix + serializeValueWithOptions(element, options);\n        const indexRaw = near.storageReadRaw(encode(indexLookup));\n        if (!indexRaw) {\n            return false;\n        }\n        // If there is only one element then swap remove simply removes it without\n        // swapping with the last element.\n        if (this.length === 1) {\n            near.storageRemove(indexLookup);\n            const index = deserializeIndex(indexRaw);\n            this._elements.swapRemove(index);\n            return true;\n        }\n        // If there is more than one element then swap remove swaps it with the last\n        // element.\n        const lastElement = this._elements.get(this.length - 1, options);\n        assert(!!lastElement, ERR_INCONSISTENT_STATE);\n        near.storageRemove(indexLookup);\n        // If the removed element was the last element from keys, then we don't need to\n        // reinsert the lookup back.\n        if (lastElement !== element) {\n            const lastLookupElement = this.elementIndexPrefix +\n                serializeValueWithOptions(lastElement, options);\n            near.storageWriteRaw(encode(lastLookupElement), indexRaw);\n        }\n        const index = deserializeIndex(indexRaw);\n        this._elements.swapRemove(index);\n        return true;\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear(options) {\n        for (const element of this._elements) {\n            const indexLookup = this.elementIndexPrefix + serializeValueWithOptions(element, options);\n            near.storageRemove(indexLookup);\n        }\n        this._elements.clear();\n    }\n    [Symbol.iterator]() {\n        return this._elements[Symbol.iterator]();\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new VectorIterator(this._elements, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Extends the current collection with the passed in array of elements.\n     *\n     * @param elements - The elements to extend the collection with.\n     */\n    extend(elements) {\n        for (const element of elements) {\n            this.set(element);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const set = new UnorderedSet(data.prefix);\n        // reconstruct Vector\n        const elementsPrefix = data.prefix + \"e\";\n        set._elements = new Vector(elementsPrefix);\n        set._elements.length = data._elements.length;\n        return set;\n    }\n    elements({ options, start, limit, }) {\n        const ret = [];\n        if (start === undefined) {\n            start = 0;\n        }\n        if (limit == undefined) {\n            limit = this.length - start;\n        }\n        for (let i = start; i < start + limit; i++) {\n            ret.push(this._elements.get(i, options));\n        }\n        return ret;\n    }\n}\n","import * as near from \"./api\";\nimport { deserialize, serialize, bytes, encode } from \"./utils\";\n/**\n * Tells the SDK to use this function as the initialization function of the contract.\n *\n * @param _empty - An empty object.\n */\nexport function initialize(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\n/**\n * Tells the SDK to expose this function as a view function.\n *\n * @param _empty - An empty object.\n */\nexport function view(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\nexport function call({ privateFunction = false, payableFunction = false, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            if (privateFunction &&\n                near.predecessorAccountId() !== near.currentAccountId()) {\n                throw new Error(\"Function is private\");\n            }\n            if (!payableFunction && near.attachedDeposit() > 0n) {\n                throw new Error(\"Function is not payable\");\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\n/**\n * Tells the SDK to apply an array of passed in middleware to the function execution.\n *\n * @param middlewares - The middlewares to be executed.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function middleware(...middlewares) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            try {\n                middlewares.forEach((middleware) => middleware(...args));\n            }\n            catch (error) {\n                throw new Error(error);\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\nexport function NearBindgen({ requireInit = false, serializer = serialize, deserializer = deserialize, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (target) => {\n        return class extends target {\n            static _create() {\n                return new target();\n            }\n            static _getState() {\n                const rawState = near.storageReadRaw(bytes(\"STATE\"));\n                return rawState ? this._deserialize(rawState) : null;\n            }\n            static _saveToStorage(objectToSave) {\n                near.storageWriteRaw(bytes(\"STATE\"), this._serialize(objectToSave));\n            }\n            static _getArgs() {\n                return JSON.parse(near.input() || \"{}\");\n            }\n            static _serialize(value, forReturn = false) {\n                if (forReturn) {\n                    return encode(JSON.stringify(value, (_, value) => typeof value === \"bigint\" ? `${value}` : value));\n                }\n                return serializer(value);\n            }\n            static _deserialize(value) {\n                return deserializer(value);\n            }\n            static _reconstruct(classObject, plainObject) {\n                for (const item in classObject) {\n                    const reconstructor = classObject[item].constructor?.reconstruct;\n                    classObject[item] = reconstructor\n                        ? reconstructor(plainObject[item])\n                        : plainObject[item];\n                }\n                return classObject;\n            }\n            static _requireInit() {\n                return requireInit;\n            }\n        };\n    };\n}\n","import {\n  NearBindgen,\n  near,\n  call,\n  view,\n  LookupMap,\n  UnorderedSet,\n  UnorderedMap,\n} from \"near-sdk-js\";\n\n@NearBindgen({})\nclass VotingContract {\n  // Candidate Pair Used to store Candidate Names and URL links\n  candidatePair = new UnorderedMap<string[]>(\"candidate_pair\");\n  // Prompt Set Was used to in an effort to keep track of keys for the candidatePair Unordered Map\n  promptSet = new UnorderedSet<string>(\"promptArray\");\n  voteArray = new UnorderedMap<number[]>(\"voteArray\");\n  userParticipation = new UnorderedMap<string[]>(\"user Participation \");\n\n  @view({})\n  getUrl({ prompt, name }: { prompt: string; name: string }): string {\n    near.log(prompt);\n    let candidateUrlArray = this.candidatePair.get(prompt);\n    return candidateUrlArray[candidateUrlArray.indexOf(name) + 1];\n  }\n\n  @view({})\n  didParticipate({ prompt, user }: { prompt: string; user: string }): boolean {\n    let promptUserList: string[] = this.userParticipation.get(prompt, {\n      defaultValue: [],\n    });\n    near.log(promptUserList);\n    return promptUserList.includes(user);\n  }\n\n  @view({})\n  participateArray({ prompt }: { prompt: string }): string[] {\n    return this.userParticipation.get(prompt);\n  }\n\n  @view({})\n  getAllPrompts(): string[] {\n    return this.promptSet.toArray();\n  }\n\n  @view({})\n  getVotes({ prompt }: { prompt: string }): number[] {\n    return this.voteArray.get(prompt, { defaultValue: [] });\n  }\n\n  @view({})\n  getCandidatePair({ prompt }: { prompt: string }): string[] {\n    let candidateUrlArray = this.candidatePair.get(prompt, {\n      defaultValue: [\"n/a,n/a\"],\n    });\n    return [candidateUrlArray[0], candidateUrlArray[2]];\n  }\n\n  @call({})\n  addCandidatePair({\n    prompt,\n    name1,\n    name2,\n    url1,\n    url2,\n  }: {\n    prompt: string;\n    name1: string;\n    name2: string;\n    url1: string;\n    url2: string;\n  }) {\n    this.candidatePair.set(prompt, [name1, url1, name2, url2]);\n  }\n\n  @call({})\n  initializeVotes({ prompt }: { prompt: string }) {\n    this.voteArray.set(prompt, [0, 0]);\n  }\n\n  @call({})\n  addToPromptArray({ prompt }: { prompt: string }) {\n    this.promptSet.set(prompt);\n  }\n\n  @call({})\n  clearPromptArray() {\n    this.promptSet.clear();\n    this.candidatePair.clear();\n    this.userParticipation.clear();\n    this.voteArray.clear();\n    near.log(\"clearing polls\");\n  }\n\n  @call({})\n  addVote({ prompt, index }: { prompt: string; index: number }) {\n    let currentVotes = this.voteArray.get(prompt, { defaultValue: [0, 0] });\n    currentVotes[index] = currentVotes[index] + 1;\n    this.voteArray.set(prompt, currentVotes);\n  }\n\n  @call({})\n  recordUser({ prompt, user }: { prompt: string; user: string }) {\n    let currentArray = this.userParticipation.get(prompt, { defaultValue: [] });\n    currentArray.includes(user) ? null : currentArray.push(user);\n    this.userParticipation.set(prompt, currentArray);\n  }\n}\n"],"names":["PromiseIndexBrand","TYPE_KEY","TypeBrand","ERR_INCONSISTENT_STATE","ERR_INDEX_OUT_OF_BOUNDS","assert","expression","message","Error","getValueWithOptions","value","options","deserializer","deserialize","defaultValue","deserialized","undefined","reconstructor","serializeValueWithOptions","serializer","serialize","valueToSerialize","encode","JSON","stringify","key","toString","BIGINT","Date","toISOString","DATE","valueToDeserialize","parse","decode","_","Object","keys","length","every","includes","BigInt","bytes","s","env","latin1_string_to_uint8array","str","a","uint8array_to_latin1_string","utf8_string_to_uint8array","uint8array_to_utf8_string","CurveType","DataLength","PromiseResult","PromiseError","U64_MAX","EVICTED_REGISTER","log","params","reduce","accumulated","parameter","index","param","stringified","predecessorAccountId","predecessor_account_id","read_register","currentAccountId","current_account_id","attachedDeposit","attached_deposit","storageReadRaw","returnValue","storage_read","storageRead","ret","storageHasKeyRaw","storage_has_key","storageHasKey","storageGetEvictedRaw","storageWriteRaw","storage_write","storageRemoveRaw","storage_remove","storageRemove","inputRaw","input","LookupMap","constructor","keyPrefix","containsKey","storageKey","near","get","remove","set","newValue","storageValue","extend","keyValuePairs","reconstruct","data","indexToKey","prefix","Uint32Array","array","Uint8Array","buffer","Vector","isEmpty","swapRemove","pop","last","push","element","lastIndex","lastKey","replace","elements","Symbol","iterator","VectorIterator","createIteratorWithOptions","toArray","clear","vector","current","next","done","UnorderedMap","_keys","values","valueAndIndex","serialized","newElementIndex","oldValue","oldIndex","oldValueAndIndex","swappedKey","swappedValueAndIndex","UnorderedMapIterator","map","start","limit","i","unorderedMap","serializeIndex","deserializeIndex","rawIndex","UnorderedSet","elementIndexPrefix","_elements","contains","indexLookup","nextIndex","nextIndexRaw","indexRaw","lastElement","lastLookupElement","elementsPrefix","view","_empty","_target","_key","_descriptor","call","privateFunction","payableFunction","descriptor","originalMethod","args","apply","NearBindgen","requireInit","target","_create","_getState","rawState","_deserialize","_saveToStorage","objectToSave","_serialize","_getArgs","forReturn","_reconstruct","classObject","plainObject","item","_requireInit","VotingContract","_dec","_dec2","_dec3","_dec4","_dec5","_dec6","_dec7","_dec8","_dec9","_dec10","_dec11","_dec12","_dec13","_class","_class2","candidatePair","promptSet","voteArray","userParticipation","getUrl","prompt","name","candidateUrlArray","indexOf","didParticipate","user","promptUserList","participateArray","getAllPrompts","getVotes","getCandidatePair","addCandidatePair","name1","name2","url1","url2","initializeVotes","addToPromptArray","clearPromptArray","addVote","currentVotes","recordUser","currentArray","_applyDecoratedDescriptor","prototype","getOwnPropertyDescriptor","_state","_contract","_args","_result","onReturn","value_return"],"mappings":"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"}